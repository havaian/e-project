version: '3.8'

name: ${PROJECT_NAME}

services:
  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: ${PROJECT_NAME}-mongodb
    restart: always
    ports:
      - "${MONGODB_EXPOSE}:${MONGODB_PORT}"
    volumes:
      - mongodb_data:/data/db
    networks:
      - default_net
    command: mongod --port ${MONGODB_PORT}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "${MONGODB_PORT}"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 15s
    stop_grace_period: 10s

  # Redis service for caching
  redis:
    image: redis:alpine
    container_name: ${PROJECT_NAME}-redis
    restart: always
    ports:
      - "${REDIS_EXPOSE}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    command: --port ${REDIS_PORT}
    networks:
      - default_net
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${REDIS_PORT}", "ping"]
      interval: 3s
      timeout: 2s
      retries: 3
      start_period: 5s
    stop_grace_period: 5s

  # RabbitMQ for message broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${PROJECT_NAME}-rabbitmq
    restart: always
    ports:
      - "${RABBITMQ_EXPOSE_1}:${RABBITMQ_PORT_1}"
      - "${RABBITMQ_EXPOSE_2}:${RABBITMQ_PORT_2}"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/main.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - default_net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    stop_grace_period: 15s

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}-backend
    restart: always
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      # - NODE_ENV=production
      - PORT=3000
      - MONGO_URI=mongodb://mongodb:${MONGODB_PORT}/${MONGO_DATABASE}
      - REDIS_URI=redis://redis:${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - RABBITMQ_URI=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:${RABBITMQ_PORT_1}
      - FRONTEND_URL=${PROJECT_URL}
      - API_URL=${PROJECT_URL}/api
    env_file:
      - ./.env
      - ./.env.local
    ports:
      - "${BACKEND_EXPOSE}:${BACKEND_PORT}"
    volumes:
      - backend_logs:/usr/src/app/logs
      - ./uploads/:/usr/src/app/uploads:rw,Z
    networks:
      - default_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${BACKEND_PORT}/api/health"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 10s
    stop_grace_period: 10s

  # Frontend service
  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
      - VITE_APP_TITLE=${VITE_APP_TITLE}
      - VITE_PROJECT_NAME=${VITE_PROJECT_NAME}
      - VITE_PROJECT_URL=${VITE_PROJECT_URL}
      - VITE_COLOR_1=${VITE_COLOR_1}
      - VITE_COLOR_2=${VITE_COLOR_2}
      - VITE_COLOR_3=${VITE_COLOR_3}
      - VITE_COLOR_4=${VITE_COLOR_4}
      - VITE_COLOR_5=${VITE_COLOR_5}
      - VITE_COLOR_SUCCESS=${VITE_COLOR_SUCCESS}
      - VITE_COLOR_WARNING=${VITE_COLOR_WARNING}
      - VITE_COLOR_ERROR=${VITE_COLOR_ERROR}
      - VITE_APP_TITLE_1=${VITE_APP_TITLE_1}
      - VITE_APP_TITLE_2=${VITE_APP_TITLE_2}
      - VITE_APP_TITLE_3=${VITE_APP_TITLE_3}
      - VITE_APP_PAGE_TITLE=${VITE_APP_PAGE_TITLE}
      - VITE_APP_PAGE_DESC=${VITE_APP_PAGE_DESC}
      - VITE_APP_COMPANY_NAME=${VITE_APP_COMPANY_NAME}
      - VITE_SUPPORT_PHONE=${VITE_SUPPORT_PHONE}
      - VITE_SUPPORT_EMAIL=${VITE_SUPPORT_EMAIL}
      - VITE_BLOG_URL=${VITE_BLOG_URL}
      - VITE_PRIVACY_POLICY_URL=${VITE_PRIVACY_POLICY_URL}
      - VITE_TERMS_OF_SERVICE_URL=${VITE_TERMS_OF_SERVICE_URL}
      - VITE_MODULE_ACHIEVEMENTS_ENABLED=${VITE_MODULE_ACHIEVEMENTS_ENABLED}
      - VITE_MODULE_MONTHLY_PAYMENTS_ENABLED=${VITE_MODULE_MONTHLY_PAYMENTS_ENABLED}
      - VITE_MODULE_GROUP_CONSULTATIONS_ENABLED=${VITE_MODULE_GROUP_CONSULTATIONS_ENABLED}
    container_name: ${PROJECT_NAME}-frontend
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - ./.env
      - ./.env.local
    environment:
      - VITE_SOCKET_URL=${API_URL}
      - VUE_APP_API_URL=${PROJECT_URL}/api
      - VUE_APP_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    ports:
      - "${FRONTEND_EXPOSE}:80"
    networks:
      - default_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 5s
    stop_grace_period: 5s

  # # Monitoring with Prometheus
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: ${PROJECT_NAME}-prometheus
  #   restart: always
  #   ports:
  #     - "${PROMETHEUS_EXPOSE}:${PROMETHEUS_PORT}"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   networks:
  #     - default_net
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 30s

  # # Visualization with Grafana
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: ${PROJECT_NAME}-grafana
  #   restart: always
  #   ports:
  #     - "${GRAFANA_EXPOSE}:${GRAFANA_PORT}"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
  #   networks:
  #     - default_net
  #   depends_on:
  #     prometheus:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 30s

  # # Loki for log aggregation
  # loki:
  #   image: grafana/loki:latest
  #   container_name: ${PROJECT_NAME}-loki
  #   restart: always
  #   ports:
  #     - "${LOKI_EXPOSE}:${LOKI_PORT}"
  #   volumes:
  #     - loki_data:/loki
  #   command: -config.file=/etc/loki/local-config.yaml
  #   networks:
  #     - default_net
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 20s

volumes:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  backend_logs:
  frontend_logs:
  # prometheus_data:
  # grafana_data:
  # loki_data:
  # nginx_logs:

networks:
  default_net:
    driver: bridge